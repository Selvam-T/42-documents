
🟡 Node.js / Fastify
-----------------------------------------------------------------------------------------------

🔸 Fastify and Single-Page Applications (SPAs) 
   are distinct concepts related to web development.
   
🔸 Fastify is a high-performance Node.js web framework

🔸 SPAs are a type of web application that loads a single HTML page and 
   dynamically updates the content via JavaScript without full page reloads

🔸 Fastify can be used as a backend to serve an SPA, but it's not a SPA itself

🔸 Fastify is used to build APIs, web applications, and microservices

🔸 Fastify offers strong support for TypeScript.

🔸 How Fastify and SPAs are used together:

	Backend for an SPA:
	<> Fastify can be used as the backend to serve the static assets 
	   (HTML, CSS, JavaScript) of an SPA
	   
	API endpoints:
	<> Fastify can be used to create API endpoints that the SPA can 
	   interact with to fetch data or perform actions

🔹 Browser comes with javascript runtime environment, 
   Node.js is used to establish a runtime environment on a server.

🔹 Node.js is a JavaScript runtime environment, not a framework itself.
	- open-source server environment that runs on Windows, Linux, Unix, etc
	- to build scalable network applications

🔹 Examples of nodejs frameworks
	- Fastify
	- Express.js
	- Next.js
	- Koa
	- Nest.js
	- Hapi.js

🔹 How to Check if Node.js and npm is Available on Unix?
	node -v
	npm -v
	sudo apt install nodejs npm // to install if not installed

🔹 npm install
	- node package manager
 	- installs the dependencies listed in the package.json file of a Node.js 
 	  project into the node_modules directory **
 	  
🔹 node_modules directory **
	- fundamental part of Node.js project structure
	- stores external dependencies packages installed via npm

🔹 Steps to Set Up Fastify
	- mkdir my-fastify-app
	- cd my-fastify-app
	- npm init -y
	- npm i fastify

🔹 package.json is a configuration file for Node.js projects
	- create package.json yourself
	- (Dockerfile is an anologous to this)
	- When you run npm i (or npm install), npm reads package.json 
	  and downloads the listed packages into the node_modules folder.
	- it contains 
		name of project, 
		entrypoint script, 
		dependencies {fastify} - core framework to build HTTP server
		
🔹 How to start a Node.js application
	- node .
	- executes the entrypoint index.js in package.json
	- if index.js imports Fastify and sets up related functionality
	- then it starts a Fastify framework-based HTTP server
	
🟣 Babylon.js
-----------------------------------------------------------------------------------------------

🔸  Babylon.js is a powerful, open-source 3D game and rendering engine that runsin 
    the browser using WebGL.
  
🔸  Babylon.js is being used to add 3D capabilities to an otherwise 2D game.

🔸  index.html , js scripts, css files


🟡 Grafana
-----------------------------------------------------------------------------------------------
🔹 Grafana is an open-source platform for monitoring, visualization, and analytics, 
   used to create dashboards that display data from various sources in real-time.

🔹 It’s commonly used for tracking system performance, application metrics, 
   or any time-series data, offering customizable graphs, charts, and alerts.

🔹 Data Source: 
	The Pong game generates metrics, like player scores, paddle hits, ball speed, 
	game duration, or system resource usage (CPU/memory of the arcade machine). 
	
	These metrics are collected by a time-series database 
	(e.g., Prometheus or InfluxDB) that Grafana connects to.

🔹 Grafana Dashboard: 
	You create a Grafana dashboard to visualize the game’s data.
	
🔹 Real-Time Monitoring: 
	As players compete, Grafana updates the dashboard in real-time, letting you 
	see how intense the match is or if the machine is overheating from prolonged use.
	
🔹 Alerts: 
	You set up Grafana alerts to notify you if something goes wrong, like if the game 
	crashes (no new metrics) or if a player’s score seems suspiciously high (possible cheating).
	
🔹 Analysis: 
	After a tournament, you use Grafana to analyze historical data, identifying 
	patterns like peak playtimes or which player tends to dominate based on hit accuracy.

🟢 Web Modules
-----------------------------------------------------------------------------------------------
Backend Framework (Fastify with Node.js):

	Interaction:	
	Fastify (framework) runs on Node.js (runtime) using npm (package manager) 
	to install dependencies.

	Action: 
	Hosts APIs/WebSockets for all backend modules, handling requests from frontend 
	and CLI (e.g., game state updates).


Frontend Framework (Tailwind CSS + TypeScript):

	Interaction: 
	Tailwind CSS (styling) integrates with TypeScript (scripting) via Vite/Webpack (bundler) 
	and npm (dependencies). React/Vue.js (UI library) may be used for dynamic components.

	Action: 
	Renders responsive, typed UI for games, dashboards, and settings, ensuring 
	consistent styling and interactivity.
	
Database (SQLite):

	Interaction: 
	SQLite (database) connects to Fastify via Sequelize/Knex.js (ORM/query builder) 
	for data operations.

	Action: 
	Stores/retrieves user data, game outcomes, settings, and metrics for all backend modules.
	
🟧 Required npm libraries ❓

	- tailwindcss: Styles paddle for consistent game visuals.
	- typescript: Ensures type-safe handling of game state (ball/paddle positions).
	- sqlite3: Interfaces with SQLite to query match/user stats.
	- sequelize or knex: Simplifies SQL queries for stats retrieval 
		(e.g., SELECT wins FROM matches).
	- fastify: Creates API endpoints (e.g., /stats/user) to serve stats data.
	- jest: JavaScript testing framework for unit and integration tests
		- Mock SQLite queries to test stats retrieval
		- Verify WebSocket client updates paddle position correctly (frontend)
		- Validate WebSocket responses for paddle movements (backend)
		- Test Chart.js rendering with sample stats data.
	
🟢 User Management Modules
-----------------------------------------------------------------------------------------------

Standard User Management (Backend):

	Interaction: 
	Fastify (framework) on Node.js uses bcrypt (hashing) for passwords and 
	JWT (authentication) for tokens, interfacing with SQLite via Sequelize/Knex.js.
	
	Action: 
	Manages user registration, login, and profile updates, storing data in SQLite 
	and issuing JWTs for secure access.

Standard User Management (Frontend):
	
	Interaction: 
	Tailwind CSS (styling) and TypeScript (scripting) with React/Vue.js (UI) use Axios 
	(HTTP client) to send requests to Fastify APIs.
	
	Action: 
	Renders login/registration forms and profile UI, sending user inputs to backend for authentication.

Remote Authentication (Google Sign-in, Backend):
	
	Interaction: 
	Fastify (framework) on Node.js integrates Google OAuth 2.0 API via Passport.js 
	(middleware), syncing with SQLite for user data.
	
	Action: 
	Handles Google Sign-in token exchange, creating/linking user accounts in SQLite.

Remote Authentication (Google Sign-in, Frontend):
	
	Interaction: 
	Tailwind CSS and TypeScript with React/Vue.js use Google Sign-in SDK 
	to trigger OAuth flow, sending tokens to Fastify via Axios.
	
	Action: 
	Displays Google Sign-in button, initiating authentication and rendering login UI.
	
🟧 Required npm libraries ❓

	- chart.js: Renders bar/line charts for stats (e.g., win rate, score trends).
	- axios: Fetches stats from Fastify APIs for dynamic updates.
	- react or vue: Builds dynamic dashboard UI for stats display.
	- tailwindcss: Styles responsive dashboard layouts.
	- typescript: Ensures type-safe stats data handling.

🟢 Gameplay and User Experience Modules
-----------------------------------------------------------------------------------------------

New Game with User History and Matchmaking (Backend):

	Interaction: 
	Fastify (framework) on Node.js uses WebSocket (real-time) for gameplay and Redis 
	(queue) for matchmaking, storing data in SQLite via Sequelize/Knex.js.

	Action: 
	Manages new game logic, tracks user history, and matches players, storing outcomes 
	in SQLite.

New Game with User History and Matchmaking (Frontend):

	Interaction:
	 Tailwind CSS and TypeScript with React/Vue.js use WebSocket client to 
	 receive game updates and Axios for history/matchmaking data from Fastify.

	Action: 
	Renders new game UI and displays history/matchmaking interfaces.

Game Customization Options (Backend):

	Interaction: 
	Fastify (framework) on Node.js stores settings in SQLite via Sequelize/Knex.js, 
	applying them to game logic.

	Action: 
	Manages customization (e.g., power-ups, maps) for all games, 
	storing user preferences.

Game Customization Options (Frontend):

	Interaction: 
	Tailwind CSS and TypeScript with React/Vue.js use Axios to send settings to Fastify.

	Action: 
	Renders customization menus, sending user selections to backend.

🟢 AI-Algo Modules
-----------------------------------------------------------------------------------------------

AI Opponent (Backend):

	Interaction: 
	Fastify (framework) on Node.js uses TensorFlow.js/Node.js AI libraries for AI logic, 
	storing outcomes in SQLite via Sequelize/Knex.js.
	
	Action: 
	Simulates AI paddle movements, updating game state and saving match results.

AI Opponent (Frontend):

	Interaction: 
	Tailwind CSS and TypeScript with React/Vue.js use WebSocket client to receive 
	AI movements from Fastify.
	
	Action: 
	Renders AI-controlled paddle in the game UI.

User and Game Stats Dashboards (Backend):

	Interaction: 
	Fastify (framework) on Node.js queries SQLite via Sequelize/Knex.js, 
	optionally using Chart.js backend utilities for data processing.
	
	Action: 
	Retrieves stats (e.g., wins, losses) for dashboards.

User and Game Stats Dashboards (Frontend):

	Interaction: 
	Tailwind CSS and TypeScript with React/Vue.js use Axios to fetch stats from Fastify, 
	rendering visualizations with Chart.js.

	Action: 
	Displays dashboards with charts/graphs for user and game stats.

🟢 Graphics Module
-----------------------------------------------------------------------------------------------

Advanced 3D Techniques (Backend):

	Interaction: 
	Fastify (framework) on Node.js uses WebSocket (real-time) to send 
	game state to frontend, storing sessions in SQLite via Sequelize/Knex.js.

	Action: 
	Processes 3D game state (e.g., ball/paddle positions) for rendering.

Advanced 3D Techniques (Frontend):

	Interaction: 
	Tailwind CSS and TypeScript with Babylon.js (3D rendering) and WebGL 
	(graphics) use WebSocket client to receive state from Fastify.

	Action: 
	Renders 3D visuals for Pong and new game in the browser.

🟢 Accessibility Modules
-----------------------------------------------------------------------------------------------

Support on All Devices (Frontend):

	Interaction: 
	Tailwind CSS (styling) with TypeScript and PostCSS (CSS processing) ensures 
	responsive design, integrated with React/Vue.js.

	Action: 
	Adapts UI to various screen sizes and input methods (e.g., touch, keyboard).

Expanding Browser Compatibility (Backend):

	Interaction: 
	Fastify (framework) on Node.js uses Browserlist (config) to ensure 
	API compatibility across browsers.

	Action: 
	Delivers consistent APIs for additional browser support.

Expanding Browser Compatibility (Frontend):

	Interaction: 
	Tailwind CSS and TypeScript with Babel (transpiler) and Polyfills ensure 
	UI compatibility, integrated with React/Vue.js.

	Action: 
	Renders UI consistently in new browsers.

Accessibility for Visually Impaired Users (Frontend):

	Interaction: 
	Tailwind CSS and TypeScript with ARIA (standards) and axe-core (testing) enhance accessibility, integrated with React/Vue.js.

	Action: 
	Adds screen reader support, alt text, and high-contrast UI.

🟢 DevOps Module
-----------------------------------------------------------------------------------------------

Monitoring System (Prometheus and Grafana, Backend):

	Interaction: 
	Prometheus (monitoring) collects metrics via Node Exporter from Fastify and SQLite, visualized in Grafana (dashboards), deployed with Docker (containerization).

	Action: 
	Monitors system health/performance, generating real-time dashboards and alerts.

🟢 Server-Side Pong Module
-----------------------------------------------------------------------------------------------

Server-Side Pong and API (Backend):

	Interaction: 
	Fastify (framework) on Node.js uses WebSocket (real-time gameplay) and OpenAPI/Swagger 
	(API docs) to expose endpoints, storing state in SQLite via Sequelize/Knex.js. 
	Commander.js (CLI library) supports CLI interaction.

	Action: 
	Manages server-side Pong logic (ball movement, scoring) and API for game 
	initialization/controls, enabling web/CLI access.

Server-Side Pong and API (Frontend):

	Interaction: 
	Tailwind CSS and TypeScript with React/Vue.js use Axios and WebSocket client to 
	interact with Fastify APIs/endpoints.

	Action: 
	Renders Pong UI, sending player inputs and receiving game state for web/CLI interaction.


🟢 Cross-Component Interactions
-----------------------------------------------------------------------------------------------
<> Backend Framework (Fastify, Node.js) [BLUE] <---> All Backend Modules:

	Interaction: 
	Fastify serves APIs/WebSockets for 
		Standard User Management [GREEN], 
		Game Customization [RED], 
		AI-Algo [YELLOW], 
		Graphics [PURPLE], 
		Monitoring System [CYAN], 
		Server-Side Pong [PINK] backend modules, 
	using SQLite for data persistence.

	Action: 
	Enables communication between frontend, backend, 
	and CLI for gameplay, authentication, and monitoring.

<> Frontend Framework (Tailwind CSS, TypeScript) [BLUE] <---> All Frontend Modules:

	Interaction: 
	Tailwind CSS and TypeScript with React/Vue.js render UI for 
		Standard User Management [GREEN], 
		Game Customization [RED], 
		AI-Algo [YELLOW], 
		Graphics [PURPLE], 
		Accessibility [ORANGE], 
		Server-Side Pong [PINK] frontend modules, 
	using Axios/WebSocket for backend communication.
	
	Action: 
	Provides consistent, accessible UI across all features.

<> Database (SQLite) [BLUE] <---> All Backend Modules:
	Interaction: 
	SQLite with Sequelize/Knex.js stores data for 
		Standard User Management [GREEN], 
		Game Customization [RED], 
		AI-Algo [YELLOW], 
		Graphics [PURPLE],
		Monitoring System [CYAN], 
		Server-Side Pong [PINK] backend modules.
	
	Action: 
	Centralizes storage for 
		user profiles, 
		game state, 
		settings, and 
		metrics.

<> Standard User Management [GREEN] <---> Gameplay [RED], 
				<---> AI-Algo [YELLOW], 
				<---> Graphics [PURPLE],
				<---> Server-Side Pong [PINK]:
	Interaction: 
	Fastify (backend) links user profiles to game data in SQLite; 
	React/Vue.js (frontend) displays profiles.
	
	Action: 
	Associates game history, stats, and sessions with users.

<> Game Customization [RED] <---> New Game [RED], 
			<---> AI Opponent [YELLOW], 
			<---> 3D Techniques [PURPLE], 
			<---> Server-Side Pong [PINK]:
	Interaction: 
	Fastify applies settings from SQLite to game logic; 
	React/Vue.js renders customization UI.
	
	Action: 
	Customizes gameplay (e.g., power-ups) across all games.

<> Monitoring System [CYAN] <---> All Backend Modules:
	Interaction: 
	Prometheus collects metrics from Fastify and SQLite, visualized in Grafana.
	
	Action: 
	Monitors performance of all backend operations.

<> Server-Side Pong [PINK] <---> Web [BLUE], 
			   <---> User Management [GREEN], 
			   <---> Graphics [PURPLE], 
			   <---> Accessibility [ORANGE]:
	Interaction: 
	Fastify (backend) with WebSocket/OpenAPI handles Pong logic, 
		integrating with SQLite and 
		user profiles; 
	React/Vue.js (frontend) with Tailwind CSS renders UI, applying accessibility features.
	
	Action: 
	Runs server-side Pong, 
		exposes API for web/CLI, and 
		ensures responsive, accessible gameplay.
