
🟧 what is style.css
-----------------------------------------------------------------------------------------------

	1) Where all custom CSS lives.

	2) You define all classes and styles manually.

	3) You must manage layout, spacing, responsiveness, etc., yourself.


🟧 with and without Tailwind
-----------------------------------------------------------------------------------------------

Without Tailwind:

	1) You’d write custom CSS for every component.

	2) Need to manage class naming, scoping, and duplication.

	3) Slower prototyping.

	4) More room for bloated or unused CSS.
	
With Tailwind:

	1) Faster development via utility-first styling.

	2) Avoids context-switching (no jumping to a .css file).

	3) Smaller CSS bundle when purged correctly.

	4) Consistent design system with spacing, color, font utilities.

	5) Encourages component reusability and simplicity.

	
🟧 Do you need style.css with Tailwind ?
-----------------------------------------------------------------------------------------------

No, you don’t need a style.css with Tailwind — 
but you can use one if you want custom styling or component classes.

i.e.,	1) You're using only Tailwind utility classes in HTML/JSX/TSX.

	2) You don’t need custom styles or extra CSS rules.

	3) You’re not extending Tailwind with custom components or overrides.


🟣 Files of Interest for Conversion from Traditional CSS to Tailwind CSS
-----------------------------------------------------------------------------------------------
1) src/client/webClient/style.css

2) src/client/webClient/index.html

3) All files in src/client/sidebar_views/ 

4) All files in src/client/ui/

5) src/client/webClient/modal.ts

Additional Files You May Need to Add

6) tailwind.config.js

7) postcss.config.js

8) A new primary CSS file to include Tailwind's base styles:
   Import this new CSS file into your main client entry point
   
   Optional, if you don't reuse style.css
	
	src/index.css or src/input.css
	

🟣 Setup Tailwind (old)
-----------------------------------------------------------------------------------------------

Vite use Tailwind as a plugin, not a CLI.
Pong game loads Tailwind through Vite, not via Tailwind's CLI processor.

1) Vite wants Node version > v20.16.0
	check node version,
	node -v
	
2) nvm install 20.19.0
	nvm -v
	if nvm is not found, install nvm
	
	curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
	
3) nvm use 20.19.0

*** at this point Node and npm versions are as required ***

4) npm install
	Check npm -v
	
5) Install Tailwind via npm
   npm install -D tailwindcss postcss autoprefixer
   
   Tailwind core package (tailwindcss) is needed because Vite uses it internally to process styles.
   
   Install Tailwind → YES
   Run Tailwind CLI → NO 
   Use Vite plugin → YES

6) I can't run 'npx tailwindcss init -p'
	CLI is not installed, it is only a plugin.
	So manually create,
		tailwind.config.js
		postcss.config.js
	place it in root directory, same place as package.json
		
7) Update style.css with Tailwind base directives

8) Configure PostCSS + Tailwind (via Vite)

9) Use Tailwind classes directly in HTML or via TypeScript DOM code


🟣 Converting traditional CSS to Tailwind CSS in a Vite Node.js project
-----------------------------------------------------------------------------------------------

Vite:
	Vite handles the integration of Tailwind automatically through PostCSS, which simplifies 
	the process. 
	
	You do not need a special Vite plugin for Tailwind CSS.
	
	Tailwind CSS is fully integrated into your Vite build without needing @tailwindcss/vite
	
	/* remove import from vite.config.js */
	import tailwindcss from '@tailwindcss/vite' ---> remove	
	
Step 1: Install Dependencies (run it just once for the initial setup)
---------------------------------------------------------------------

1) npm install -D tailwindcss postcss autoprefixer.
	
	- tailwindcss: The core Tailwind framework.
	
	- postcss: A tool for transforming CSS with JavaScript. 
	  	- Tailwind is a PostCSS plugin.
	  	- Vite uses PostCSS under the hood, so it can pick up tailwindcss 
	  	  through postcss.config.js
	
	- autoprefixer: A PostCSS plugin that automatically adds vendor prefixes 
	  (like -webkit- or -moz-) to your CSS for better browser compatibility.

  What files did the installation modfy?
  	1) package.json
  		"devDependencies"
  	   (not "dependencies")
  	2) package-lock.json
  	
  	3) node_modules/
  		installed all necessary files and dependencies
  		
Step 2: Create Configuration Files
----------------------------------
	
Background:	
	Vite is a modern build tool. 
	Vite uses PostCSS to handle CSS.
	Vite looks for postcss.config.js file to get its instructions.
	
	PostCSS is a tool used to transform CSS.
	postcss.config.js is the orchestrator of the CSS processing pipeline.
	
	Autoprefixer is a PostCSS Plugin.
	
	tailwindcss's job is to find all your Tailwind classes and generate the actual CSS for them.
	autoprefixer's job is to take that generated CSS and add browser-specific prefixes 
		(like -webkit- or -moz-) so it works correctly in all browsers.

tailwind.config.js
------------------	
A) The Tailwind CSS Engine:

	- Configuration File: tailwind.config.js
	- To look at your HTML and TypeScript files and generate the CSS.

	You may need Tailwind CLI to automatically initialize configuration file, as below.
		> npm install -g tailwindcss
		> tailwindcss init

	1) Check CLI is installed.

	> cat node_modules/tailwindcss/package.json | grep '"bin"'
	> ls node_modules/.bin/tailwindcss

	2) If it is not installed, do a clean install

	> rm -rf node_modules package-lock.json
	> npm install -D tailwindcss@latest postcss autoprefixer

	3) For some reason, CLI is not installed,perhaps Vite plugin pack only installed
	   Tailwind as a dependency, not its CLI tools.
	   
	4) Since CLI is missing create tailwind.config.js manually:
	   in the same root folder, where package.json resides

	> touch tailwind.config.js

	module.exports = {
		content: [
			".src/client/webClient/index.html",
			".src/client/**/*.{js,ts}"
		],
		theme: {},
		plugin: [],
	};


postcss.config.js
-----------------
B) The Post-Processing:

	- Configuration File: postcss.config.js
	- first step is to actually run the Tailwind engine.	(tailwindcss)
	- next step is to scan it and add browser prefixes.	(autoprefixer)

	1) Create postcss.config.js in the root directory, as above.

	- This file hooks Tailwind CSS and Autoprefixer into Vite's build process.

	export default {
		pluggin: {
			tailwindcss: {},
			autoprefixer: {},
		},
	}

Step 3: Prepare Your Main CSS File
----------------------------------

File to edit: src/client/webClient/style.css

1) Make a temporary copy of style.css --> old-style.css, to be used later to refactor.

2) style.css will only contain the 3 core Tailwind directives.
   This injects Tailwind's base styles, component classes, and utility classes into your project.
   
3) add this line
   @import "tailwindcss";
   
   This single line now handles the job that the three separate @tailwind directives (v3).

   
Step 4: Import Your CSS into the Application
--------------------------------------------
	
1) Importing CSS into main client-side entry point.

2) Which is client-side entry point?
	client.ts or index.ts?
	
	- client.ts defines and builds the main client object.
	- index.ts imports client object/engine, then excutes the application
	- index.ts is the client-side entry point.
		
3) Add CSS import statement to the top of index.ts
	import './style.css';

4) How to you link stylesheet in index.html?

	Method A (The HTML way): 
	- Linking the stylesheet directly in index.html.

	Method B (The JS way): 
	- Importing the stylesheet in your entry point (import './style.css' in index.ts).
	
	- Doing both will cause your styles to be loaded twice, which is unnecessary. 
	  You should choose only one method.

	- don't do Method A
	  <link rel="stylesheet" href="/style.css" /> 
	  
	- do Method B only
	  <script type="module" src="/index.js"></script>
	  
5) In a vite project, index.html will point to the entry point script, index.ts
   Vite serves index.ts file as index.js to the browser.
	
	
Step 5: Refactor from CSS to Tailwind Utility Classes
-----------------------------------------------------

See below.

🟧 Two ways of CSS styling
-----------------------------------------------------------------------------------------------
			
(1) Static styling: 
	classes are baked into the HTML from the start, applied as soon as the browser loads the DOM.
	
	example: 
	<div id="modal-title" class="text-2xl font-bold text-gray-800"></div>	

(b) Dynamic styling injection: 
	JS is creating an element with classes at runtime, so styles only exist after the script runs.
 
 	example:
 	modalTitle.innerHTML = `<h2 class="text-2xl font-bold text-gray-800">${viewData.title}</h2>`;

	 			
🟧 id="modal-container" : Pong-game Tailwind CSS refactoring
-----------------------------------------------------------------------------------------------

HTML:

	1.	<div id="modal-container" class="modal-container">

	2.	<div id="modal-container-2" class="modal-container">

style.css: 

	1.	#modal-container.active {}

	2.	#modal-container-2.active {}

modal.ts
	1.	public show(){
			// ... //	
			const modalContainer = document.getElementById("modal-container");
			// ... //
	---->		modalContainer.classList.add("active"); ---> CSS style is dynamically 
									inserted HERE !
			
		}
		
		similarly in public close() {
			// ... //
			modalContainer.classList.remove("active"); ---> CSS
		
		}

	2. possibly 	public showSecond() and public closeSecond()	

How to replace with Tailwind CSS?
---------------------------------

style.css: 
	rules for #modal-container are not applied.

HTML modify:

	1. <div id="modal-container" \
	class="hidden opacity-0 pointer-events-none fixed inset-0 justify-center items-center">

	The class attribute sets the initial state of the element before any JavaScript runs.
	Preventing flicker or unwanted visibility.
	
modal.ts modify:

	1. public show() {

		REPLACE ---> modalContainer.classList.add("active")
		
		modalContainer.classList.remove("hidden", "opacity-0", "pointer-events-none");
		modalContainer.classList.add("flex", "opacity-100", "pointer-events-auto");
	    }	

		Dynamically toggle classes to show/hide modal during JS runtime.
		
	   public close() {
	   	REPLACE ---> modalContainer.classList.remove("active");
	   	
	   	modalContainer.classList.add("hidden", "opacity-0", "pointer-events-none");
		modalContainer.classList.remove("flex", "opacity-100", "pointer-events-auto");

	   }


🟧 id="modal-title" : Pong-game Tailwind CSS refactoring
-----------------------------------------------------------------------------------------------	

1) id="modal-title"

	HTML:
		<h2 id="modal-title"></h2>
		
	style.css:
		Does not have a ID selector for in CSS.
		
	modal.ts:
		const modalTitle = document.getElementById("modal-title");
		// ... //
		modalTitle.innerHTML = `<h2>${viewData.title}</h2>`; 
				---> It’s generating HTML content dynamically.
				
2) id="modal-title-2"
	is probably the same, but commented out in modal.ts
	

How to replace with Tailwind CSS?
---------------------------------

Method 1:
	Do styling in HTML:
	<div id="modal-title" class="text-2xl font-bold text-gray-800"></div>
	
	//Put permanent style in the HTML

	No styling in modal.ts
	modalTitle.textContent = viewData.title; // just the text, no styling	

	//Let .ts inject only the changing content.
	
Method 2:	
	No styling in HTML:
	<div id="modal-title"></div>

	Do styling in modal.ts
	modalTitle.innerHTML = `<h2 class="text-2xl font-bold text-gray-800">${viewData.title}</h2>`;
		---> Here you inject both the text and styling every time.


🟧 id="modal-body" : Pong-game Tailwind CSS refactoring
-----------------------------------------------------------------------------------------------	
1) id="modal-body"

	No direct styling applied in HTML.

	No ID selector for id="modal-body" in .css

	No in-line styling is injected from .ts
		only text/content is injected from .ts
		
	- Since it sits inside .modal-content, it inherits that background, padding, and text color.

2) id="modal-body-2" 
	is probably the same, but commented out in modal.ts



🟧 id="modal-divs" : Pong-game Tailwind CSS refactoring
-----------------------------------------------------------------------------------------------

HTML: 
	static CSS styling applied in HTML.

	<div id="modal-divs">
	
	//HTML provides the hook via the id.

style.css: 
	#modal-divs {
	  display: flex;
	}
	
	// CSS provides the rule via #modal-divs selector or id selector.
	// The browswer CSS engine automatically applies that rule when rendering the page.

modal.ts:
	does not reference id="modal-divs", hence it does not have dynamic CSS styling


🟧 id="modal-content" : Pong-game Tailwind CSS refactoring
-----------------------------------------------------------------------------------------------

Static CSS styling just as above, except style.css provides the rule via class selector.
	.modal-container {}
	
modal.ts:
	Only uses the id="modal-content" to find the element so it can add event listeners for 
	clicks, mouse down/up, and closing logic.
	
	Does not provide dynamic CSS styling.


🟧 id="loginButton" : Pong-game Tailwind CSS refactoring
-----------------------------------------------------------------------------------------------
// possibly same for id="profileButton", id="friendsButton", id="logoutButton" 

html:	
	Static css styling, styled in .css
	<button class="button" id="loginButton" onclick="navigate('signin')">Sign In</button>

style.css:
	#loginButton {
	  display: inline-block
	}
	
app.ts and view_signin.ts:
	The .ts filess only toggle the button’s visibility (hide/show) based on sign-in state, 
	but they don’t apply any inline styling or dynamic color changes.


🟧 id="board" : Pong-game Tailwind CSS refactoring
-----------------------------------------------------------------------------------------------

Static css styling, using id selector #board in style.css

client.ts:
	Initializes canvas using id="board".
	No styling in .ts file


🟧 id="game" : Pong-game Tailwind CSS refactoring
-----------------------------------------------------------------------------------------------

Does not have Static or dynamic css styling.

style.css has no id or class selector and rules.


🟧 id="view" : Pong-game Tailwind CSS refactoring
-----------------------------------------------------------------------------------------------

Does not appear to have static or dynamic css styling.

HTML:
	<div id="view"></div>
	//not sure if this is a target container where script or app inserts or 
	  updates contents dynamically
	  
style.css:
	Does not container id selector.
	
app.ts:
	identifies the view, and calls function to display some modal window.

modal.ts:
	called from app.ts --> other modal attributes are applied here.


🟧 id="main" : Pong-game Tailwind CSS refactoring
-----------------------------------------------------------------------------------------------

HTML:
	"main" itself is a plain container with no styles.
style.css
	 No CSS rule for #main (id selector).
	 
	 
sidebar.ts:
	Applies "main" id selector, alongside "sidebar" id selector.
	See below.

- "sidebar" inside "main" does have styling. 
- so visually "sidebar" will show with those styles, but "main" just wraps everything.


🟧 id="main" : Pong-game Tailwind CSS refactoring
-----------------------------------------------------------------------------------------------
HTML:
	<header id="sidebar" class="sidebar">
	
	- Static CSS styling is applied directly to the element with id="sidebar"
	- but Dynamic styling happens based on state, see below.
	
style.css:
	Contains a few class selectors for "sidebar"
	
sidebar.ts:
	- dynamic style changes when body has sidebar-close class (sidebar moves).

	- The toggle button .sidebar-toggle is styled separately.

	- .sidebar .button applies styling to buttons inside #sidebar.


🟧 id="lobby1" : Pong-game Tailwind CSS refactoring
-----------------------------------------------------------------------------------------------
//id="lobby1", id="lobby2", id="lobby3" all appear the same

HTML:
	Button Tag has id="lobby1" and class "button"
	
style.css:
	1) .button class selector scoped inside .sidebar
	
	CSS styles "lobby1" button statically inside .sidebar, because
		<button id="lobby1" ..>Lobby 1</button> is nested inside
		<header id="sidebar" class="sidebar">
		
	2) I wonder if CSS styles "lobby1" button statically inside .modal-content ?
		<div class="modal-content">
		...
		<span class="close-button-2">&times;</span> ??
	
	3) .button:hover rule is global to all elements with the button class, 
		regardless of whether they’re in .sidebar, .modal-content
	   
	   - :hover, :focus, :active, or body.sidebar-close .sidebar “dynamic” 
	     because they’re state-based.
	
selectLobbyLogic.ts:
	- onLobby1btnClicked() method will handle "lobby1" button clicks
	- possibly adding dynamic CSS changes like active states or other UI feedback ?


webSocketHandler.ts:
	- No Dynamic CSS applied from here ?
	- creates a new GameLobby instance for "lobby1" and 
	- sets up a handler for game end.

GameLobbyManager.create():
	- No Dynamic CSS applied from here ?
	- initializes lobby and stores it

client.ts:
	- No Dynamic CSS applied from here ?	
	- an event listener on #lobby1 triggers a socket join to "lobby1"


🟧 id="slot1" : Pong-game Tailwind CSS refactoring
-----------------------------------------------------------------------------------------------
//id="slot1", id="slot2"

HTML:
	<button id="slot1" type="button" class="button">Player 1</button>
	is nested inside <header id="sidebar" class="sidebar">
	
	- which is same as above.
	
style.css:
	- I think it is same as above
	- has Static and Dynamic
	
client.ts:
	- No Dynamic CSS applied from here ?

socketClient.ts:
	- No Dynamic CSS applied from here ?
	


🟧 id="stand" : Pong-game Tailwind CSS refactoring
-----------------------------------------------------------------------------------------------

HTML:
	- same as above

style.css:
	- same as above
	- has Static and Dynamic
	
websocketRoutes.ts:
	- calls webSocketHandler.ts
	- No Dynamic CSS applied from here ?
	
client.ts:
	- No Dynamic CSS applied from here ?
	


🟧 CSS attributes and HTML ids to search for.
-----------------------------------------------------------------------------------------------
search all Files - 
	.style
	.classList
	querySelector
	getElementById
	getElementsByClassName

I must explore the rest of the ids -

	start

	tournament



