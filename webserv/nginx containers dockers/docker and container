How to work with docker on your linux machine:
----------------------------------------------

1) Check if Docker is installed and running:
	
	docker --version


2) Check Running Containers: 
	This will show a list of running containers along with their 
	container IDs, names, and the image they are using. 
	If you see an NGINX container, it should be listed here.

	docker ps			


3) Find All Containers (Running and Stopped): 
	
	docker ps -a


4) If no containers (including NGINX) have been created on this Docker installation. 
   Pull an NGINX image and create a new container:
   	
   	docker pull nginx

	pulls an image of NGINX from Docker Hub, which is Docker's official online 
	repository for container images.
	
	Docker Hub is a public registry where developers and organizations can publish 
	and share container images.
	
5) To check if NGINX image has been pulled
	
	docker images
	
	
6) To create and start a container from the downloaded NGINX image:

	docker run -d -p 8080:80 --name my_nginx -v /home/sthiagar/webserv/nginx.conf:/etc/nginx/nginx.conf nginx
	
	
	-p 8080:80 	--> Maps port 8080 on your local machine to port 80 inside the container, 
			    so you can access NGINX at http://localhost:8080.
	--name my_nginx	--> custom name given to the running container instance
	
	-v 		--> flag in Docker is used to mount a volume (or bind mount) 
			    from your local machine into the container.
	
	/home/sthiagar/webserv/nginx.conf --> local configuration file to replace default file
	
	/etc/nginx/nginx.conf --> container’s default configuration path for NGINX 

	nginx --> at the end you see nginx, this is the name of the Docker image.
		  Docker will look for an image named nginx (from Docker Hub or 
		  your local image cache) and use it to create the container.

7) Type following in browser
	1) http://localhost/
	
	display the html page provided at location / in the nginx.conf file
	
	2) http://localhost/hello
	
	display the html page provided at location /hello if there is one
	
8) To stop a container.

	docker stop <container_id>
	
  Force Removal (if it’s still running):
  
  	docker rm -f <container_id>

What is Container:
------------------

- A container is a lightweight, standalone, and executable software package 
  that includes everything needed to run a piece of software, including the code, 
  runtime, system tools, libraries and Settings (Configuration).
  	- code: application’s source files or compiled binaries.
  	- runtime: interpreter or compiler required to execute the code
  	- system tools: utilities and commands provided by the operating system 
  	  (like grep, sed, or curl on Linux) that applications may rely on to 
  	  perform certain tasks.
  	- libraries: pre-written code that applications use to perform common tasks, 
  	  such as handling JSON, managing databases, or creating user interfaces.
  	- Settings (Configuration): Settings or configuration files define specific 
  	  parameters and environment variables that the application needs, such as 
  	  database credentials, API keys, port numbers, and environment-specific options.
  
- Containers are designed to isolate applications and their dependencies, ensuring 
  that they can run consistently across different environments. Whether the application 
  is running from your computer or in the cloud, the application behaviour remains the same.

- Containers can be created and managed by multiple tools or containerization platforms 
  (not just Docker), such as Podman, LXC (Linux Containers), and Kubernetes. 
  They provides the tools and services necessary for building, running, and deploying 
  containerised applications. 

Docker Container:
-----------------

- A Docker container is a container that is specifically created and managed by Docker.

- A container is not an image, but a live instance created from that image.

- Docker container contains all the necessary code, runtime, system tools, libraries, 
  and settings required to run a software application.

How does nginx image become a container?
----------------------------------------

1) First you pull nginx image from docker hub.
	docker pull nginx
	
2) Create and start a container
	docker run -d -p 8080:80 nginx	//in this case I am not mounting my confiq file 

What is Docker:
---------------

- Docker is simply a tool for creating and managing containers.

- Docker has two concepts that are useful to understand: 
	- the Dockerfile 
	- and Docker Images.

- A Dockerfile contains the set of instructions for building a Docker Image.
  
- A Docker Image serves as a template for creating Docker containers. 
  
Example:

	# Use an official Node.js runtime as a parent image (.js is java script)
	FROM node:18

	# Set the working directory in the container
	WORKDIR /app

	# Copy package.json and package-lock.json to install dependencies
	COPY package*.json ./

	# Install dependencies
	RUN npm install

	# Copy the rest of the application code to the container
	COPY . .

	# Expose the port the app runs on
	EXPOSE 3000

	# Define the command to run the application
	CMD ["node", "app.js"]
	
Explanation:

	FROM node:18: Specifies the base image (Node.js version 18) from which this 
	Docker image will be built.
	
	WORKDIR /app: Sets /app as the working directory within the container.
	
	COPY package*.json ./: Copies package.json and package-lock.json files to the 
	working directory to install dependencies separately (better caching).
	
	RUN npm install: Installs the project dependencies defined in package.json.
	
	COPY . .: Copies the entire project folder (current directory) to the 
	container’s /app directory.
	
	EXPOSE 3000: Specifies that the container will listen on port 3000 at runtime.
	
	CMD ["node", "app.js"]: Defines the command to start the Node.js application 
	(app.js in this case).

