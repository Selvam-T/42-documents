Transfer-Encoding (RFC 9112 6.1)
--------------------------------

The Transfer-Encoding header field lists the transfer coding names 
	corresponding to the sequence of transfer codings 
	that have been (or will be) applied to the content 
	in order to form the message body.


For example:
	Transfer-Encoding: gzip, chunked
	
Transfer-Encoding + Content-Length
----------------------------------
- A sender MUST NOT send a Content-Length header field in any message that contains a 
  Transfer-Encoding header field. (pg 18, 6.2)
  
- Transfer-Encoding is defined as overriding Content-Length (pg 18)

- Unfortunately, forwarding such a message can lead to vulnerabilities 
	regarding request smuggling (Section 11.2) or ⚠️
	response splitting (Section 11.1)attacks 
	if any downstream recipient fails to parse the message according to this specification,	
	particularly when a downstream recipient only implements HTTP/1.0.
	
How Server should respond -
-------------------------

1) A server MAY reject a request that contains both Content-Length and Transfer-Encoding 
   or
   process such a request in accordance with the Transfer-Encoding alone. (pg 18)
   
   Regardless, the server MUST close the connection after responding to such a request 
   to avoid the potential attacks.

2) A server that receives a request message with a transfer coding it does not understand 
   SHOULD respond with 501 (Not Implemented).


Decoding Chunked (pseudo-code)
-------------------------------

length := 0
read chunk-size, chunk-ext (if any), and CRLF
while (chunk-size > 0) {
	read chunk-data and CRLF
	append chunk-data to content
	length := length + chunk-size
	read chunk-size, chunk-ext (if any), and CRLF
}
read trailer field
while (trailer field is not empty) {
	if (trailer fields are stored/forwarded separately) {
		append trailer field to existing trailer fields
	}
	else if (trailer field is understood and defined as mergeable) {
		merge trailer field with existing header fields
	}
	else {
		discard trailer field
	}
	read trailer field
}
Content-Length := length
Remove "chunked" from Transfer-Encoding

Chunked Transfer Coding
------------------------

chunked-body	= 	*chunk
			last-chunk
			trailer-section
			CRLF
			
chunk		= 	chunk-size [ chunk-ext ] CRLF
			chunk-data CRLF
			
chunk-size	= 	1*HEXDIG

last-chunk	= 	1*("0") [ chunk-ext ] CRLF

chunk-data	= 	1*OCTET ; a sequence of chunk-size octets


chunk-ext	= 	*( BWS ";" BWS chunk-ext-name
			 [ BWS "=" BWS chunk-ext-val ] )

1) chunked HTTP response without Trailer Section:
---------------------------------------------

HTTP/1.1 200 OK
Content-Type: text/plain
Transfer-Encoding: chunked

7\r\n
Mozilla\r\n
9\r\n
Developer\r\n
7\r\n
Network\r\n
0\r\n
\r\n

2) chunked HTTP response with a trailer section:
--------------------------------------------

HTTP/1.1 200 OK
Content-Type: text/plain
Transfer-Encoding: chunked
Trailer: Digest, ETag

7\r\n
Mozilla\r\n
9\r\n
Developer\r\n
7\r\n
Network\r\n
0\r\n
Digest: sha-256=abc123\r\n
ETag: "xyz456"\r\n
\r\n

3) chunked transfer encoding response with chunk extensions:
--------------------------------------------------------

HTTP/1.1 200 OK
Content-Type: text/plain
Transfer-Encoding: chunked

7;signature=abc123\r\n
Mozilla\r\n
9;hash=xyz789;type=text\r\n
Developer\r\n
7;random=12345\r\n
Network\r\n
0\r\n
\r\n

----------------------------------------------------------------
1) The first chunk specifies the type in the 
	Transfer-Encoding header.
	
2)  use case 
	video streaming applications
	file downloads
	
3) total size is known to the user at the end of a download

4) 	`6\r\n			//6 is length of the ensuing chunk, \r\n end of line
	Hello,\r\n
	0\r\n`			// end of a chunked stream
	
5) Chunking of compressed data
	never compress blocks individually.
	compress data first, then split it up.

----------------------------------------------------------------	
