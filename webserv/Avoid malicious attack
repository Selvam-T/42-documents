	
Map file extensions to their respective MIME types. 
---------------------------------------------------

- What is MIME type? 
Multipurpose Internet Mail Extensions indicates the nature and format 
of a document, file, or assortment of bytes.
	
- Example of 'types' block in config file:

types {
  text/html    html htm;
  image/jpeg   jpg jpeg;
  application/json  json;
  text/css     css;
  text/plain   txt;
}
default_type application/octet-stream;  # Default for unspecified types

GET:
- a. For GET request, the server uses file extension in the URI
	1. GET /images/photo.jpg
  and matches it to the image/jpeg in the 'types' block, as above.
  
  The types block is primarily used for mapping file extensions to MIME types 
  (e.g., for serving files in response to GET requests).
  
- b. Optionally for GET request, the server determines from Accept header

	GET /data HTTP/1.1
	Accept: application/json
	
  In this case the client uses the Accept header to specify the types of 
  reponses it can handle. It informs the server that the client expects the
  reponse in application/json.
  
  If the server cannot fulfill this, it may return an error (e.g., 406 Not Acceptable).

- When the server serves a file, it sets the Content-Type header in the HTTP response 
  based on the MIME type.
  
- This tells the browser how to interpret the file.
- The browser will use this information to render or process the file correctly.

- Without a correct MIME type, the client might Display the file incorrectly, or
  Refuse to process it (e.g., reject downloads due to mismatched or missing types).

POST:
- For POST and PUT requests, the server uses 'content-Type' header in the request
  to directly determine how to parse the body, and it does not need to match it 
  to the 'types' block in the config file.
  	
  	Content-Type: application/json
  
  For POST/PUT requests, there’s no file extension involved, so the types block is irrelevant.

DELETE:
- For DELETE requests without a body, you don’t need to determine the MIME type 
  and can proceed with deletion.
  	DELETE /resource/123 HTTP/1.1
  	
- For DELETE requests with a body, use the Content-Type header to determine 
  the MIME type and parse the body appropriately if needed.
	DELETE /resource/123 HTTP/1.1
	Content-Type: application/json
	Content-Length: 24

	{"reason": "duplicate"}

- If you cannot determine the MIME type and the body is critical for the operation, 
  reject the request with 415 Unsupported Media Type. Otherwise, proceed without 
  parsing the body.

Best Practices to Avoid Malicious Attacks:
-----------------------------------------

- Strict MIME Type Validation:

	- Ensure your server strictly checks the MIME type of files before serving 
	or executing them.
	- Reject unknown or ambiguous file types.

- Configuration Coverage:

	- Ensure all common file types your server handles are explicitly configured 
	in the types block.

- Default Types:

	- Use a neutral default type like application/octet-stream for unknown files, 
	but log such cases for review.
	
	- Browsers usually don't render such files. Instead, they prompt the user to 
	download them.

- Input Sanitization:

	- Validate and sanitize all user-supplied input, including file uploads 
	and MIME types in headers.

- Disable Content Sniffing:

	- Include a header like X-Content-Type-Options: nosniff in HTTP responses 
	to prevent browsers from guessing MIME types.

Consequences of Missing or Incorrect MIME Types in Requests:
------------------------------------------------------------

- Server Misinterpretation:

If the Content-Type is missing or incorrect, the server might try to parse the request body 
using the wrong logic, leading to:
	Syntax errors.
	Security issues (e.g., injecting code that the server mishandles due to type mismatch).
	
- Failed Operations:

The server may reject the request if the Content-Type doesn’t match its expectations.
Example: A server expecting application/json will reject a request with Content-Type: text/plain.

- Security Risks:
Ambiguous or missing MIME types can make servers more vulnerable to attacks like:
	- Ambiguous or missing MIME types can make servers more vulnerable to attacks like:
	- Injection attacks: Submitting malicious payloads the server misinterprets.
