A)
Segmentation of HTTP request POST method message:
-------------------------------------------------

1) Request-Line   = <Method> SP <Request-URI> SP <HTTP-Version> CRLF

POST / HTTP/1.1

2) General-header Fields:

Host: localhost:8080
User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:133.0) Gecko/20100101 Firefox/133.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate, br, zstd

Content-Type: multipart/form-data; boundary=---------------------------254255030122431410193746728194

Content-Length: 373
Origin: null
Connection: keep-alive
Upgrade-Insecure-Requests: 1
Sec-Fetch-Dest: document
Sec-Fetch-Mode: navigate
Sec-Fetch-Site: cross-site
Sec-Fetch-User: ?1
Priority: u=0, i

3) body
-----------------------------254255030122431410193746728194
Content-Disposition: form-data; name="field1"
	//identify name = "file"? or not

This is a text field.
-----------------------------254255030122431410193746728194
Content-Disposition: form-data; name="file"; filename="testfile.txt"
Content-Type: text/plain
	//if name = "file", then extract a) filename, then b) Content-type

Selvam Testing.

-----------------------------254255030122431410193746728194--

B)

How is file upload represented ?

	1) Content-Type: multipart/form-data; boundary= ---
	
	2) The file content is enclosed between "boundary".
	
How is form-data represented, if only form-data is sent?
	
	1) Content-Type: application/x-www-form-urlencoded
	
	2) key-value pair as a single string after last header field followed by space
	
How is form-data represented, if sent together with file upload?

	1) Content-Type: multipart/form-data; boundary= ---
	
	2) Each form field is in a block.
		- The block begins with boundary. The next boundary is the end of this block.
		- file="field1" is the field name
		- followed by space
		- followed by value
	3) File upload content follows in the next boundary
		The end of all the blocks is determined by boundary post fixed with '--'	
	

C)
HTTP Request Header
--------------------------------

Field-name : Field-value	RFC 9110 5.1, 5.5

1) content-Type			RFC 9110 8.3
	- indicates the media type enclosed message content
	- If it is not present, assume "application/octet-stream"
	- resource owners not always properly provide the correct Content-Type,
		- examine the content, "MIME sniffing"
		- distinct media types often share a common data format
		- but risks drawing incorrect conclusions about the data

2) content-Encoding		RFC 9110 8.4
	- indicates what content codings have been applied to the representation
	- thus what decoding mechanisms have to be applied in order to obtain data 
	  in the media type referenced by the Content-Type header field.

3) content-Length		RFC 9110 8.6
	- number of octets
	- amount of data enclosed so that it can be used to delimit
	- the framing information necessary for determining where the data (and message) ends.
	- can be used by recipients to estimate transfer time framing

4) content-Location		RFC 9110 8.7
 	
5) Transfer-Encoding		RFC 9112 6.1 
	- intended to accurately delimit dynamically generated content.

HTTP Request body
-----------------
1) Contains the Representation data. (Like image or text or audio etc).
	The representation data is in a format and encoding defined by the 
	representation metadata header fields.
	- Content-Type
		- indicates the media type (also known as the MIME type) of the data
	- Content-Encoding
		- specifies any transformations or encodings that have been applied to the data 
		to compress or modify it.
	
	representation-data := Content-Encoding( Content-Type( data ) )

send and receive text files
---------------------------

1) For text files, you open them in the default mode, which is text mode. 
   In C++, you can simply use:
	- std::ifstream file("filename.txt");

send and receive binary files properly using sockets c++
--------------------------------------------------------
1) First of all make sure you open the file in binary mode on both sides.
	- std::ios::binary to open a file in binary mode
	- ensures that the file is read or written as raw bytes, not as text.

2) Secondly always check what send() and recv() returns.
	- they return the number of bytes actually transferred.
	- make sure the correct number of bytes were sent or received.
	- if return value is less than expected, you could call send() and recv()
	again until all data is transferred.
	
3) Thirdly, never use string functions (like strlen) to handle the binary data.
	- strlen() are designed for null-terminated C strings, not binary data
	- Binary data can contain null bytes (\0), which would prematurely terminate 
	  a string in those functions. 
	- You should handle binary data byte-by-byte instead.
	- using char or unsigned char arrays, 
  		char buffer[1024]; // or unsigned char for raw bytes
		size_t bytesRead = file.read(buffer, sizeof(buffer)).gcount(); //reading

		size_t bytesSent = send(sock, buffer, bytesRead, 0);//writing

4) Fourthly, if you use TCP remember that it's a streaming protocol with no packet
boundaries and that a single call to recv might receive less than was passed in a 
single call to send, so you always need to call recv in a loop, until youâ€™ve received 
all the data you expect.
	- The client can first send the size of the file (or the length of the data) 
	to the server. This allows the server to know exactly how many bytes to expect.
	
	send(socket, &fileSize, sizeof(fileSize), 0);

5) And lastly, most internal buffers on the sockets and into the kernel, are usually 
not big enough to contain a whole large file. 
	- Use smaller buffers in your application, read the file and send chunks 
	piece by piece, and as mentioned use a loop to receive and write the data.

	-  A common size might be 1024 or 4096 bytes (1KB or 4KB)
	-  a good balance between efficiency and network buffering.

	- Match the chunk size with the systemâ€™s buffer size or the maximum 
	transmission unit (MTU) of your network.
	- The chunk size should be small enough to fit within the socketâ€™s buffer 
	but large enough to minimize overhead (e.g., avoiding sending too many 
	small chunks). 

File Type Determination:
-----------------------
	
	- You should identify whether the file is a text file or a binary file, 
	as the reading and writing methods may differ.
	- Read through the file's data and check if any byte is outside the 
	ASCII printable character range (typically 0x20 to 0x7E).
	- If you find bytes outside this range, itâ€™s likely a binary file.
	- Text files are often terminated with a newline character, whereas 
	binary files may not have clear text delimiters.
	- Binary files do not typically have human-readable end-of-file markers, 
	unlike text files that may use newline characters (\n) 

	bool isBinary = false;
	for (size_t i = 0; i < fileSize; ++i) {
  	  if (data[i] < 0x20 || data[i] > 0x7E) {  // Check for non-printable characters
   	     isBinary = true;
      	  break;
  	  }

	- but this is not fool proof.
	
	- you could have files encoded in UFT-8 that contain non-printable characters,
	that are control characters, used to control formatting, encoding etc.
	- Examples
		0x00: Null character (NUL)
		0x08: Backspace (BS)
		0x09: Horizontal Tab (HT)
		0x0D: Carriage Return (CR, often \r)
		Accented characters: Ã©, Ã±, Ã¶, etc
		Non-Latin alphabets: Cyrillic, Greek, Hebrew, Arabic, etc.
		Emoji or symbols: ðŸ˜€, Â©, etc.
	- and so although they contain non-printable characters, they are valid text files.

Approach to Reading/Writing Binary and Text Files over TCP/IP:
--------------------------------------------------------------

Text Files - reading:
	- you can read line-by-line or by blocks of data, checking for newline 
	characters (\n) as the delimiter.
	- In TCP/IP sockets, you can use a fixed-length read or split the 
	incoming data based on the newline character.

Text Files - writing:
	- send the data in chunks and ensure that you properly encode the data as text.
	- You may want to check for the end of the file by either using a predefined 
	length or detecting the end of the input stream (e.g., using EOF in C++ or 
	checking for an empty read buffer).

Binary Files - reading: 
	- You need to know the size of the file in advance or use a fixed-size 
	read operation
	- This requires you to either know the file length beforehand or negotiate 
	the length of the file during the connection (e.g., send the file size as 
	a header).

Binary Files - writing:
	- When writing binary data, you need to ensure that you send the raw bytes 
	without any modification (i.e., no character encoding or interpretation).
	- Again, you need to either know the length of the file beforehand or send 
	the file size first, so the receiver can handle the correct number of bytes.

