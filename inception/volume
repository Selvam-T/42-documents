
Volume bind mount (not Named volume) host perspective:
------------------------------------------------------
>	If the host directory does not exist, the process fails before the container starts,
	so no directories are created. This is the case with bind mount.
	
>	But if it is Named volume mount, Docker creates it automatically when the container starts.
	
>	If the host director exists, container directory does not exist, 
	Docker sets it up and links it to the volume.
	
So why doesn't bind volume mount not create host directory if it doesn't exist?
>	Bind mounts are explicit. 
	Automatically creating directories on the host could lead to unintended consequences, 
	like filling up the wrong disk or creating folders with incorrect permissions/ownership.
	Docker avoids this requiring the host path to be pre-existing.

What about Named volumes?
>	If the Named volume doesn't exist, Docker creates it automatically when the
	container starts.
>	Docker manages the storage in /var/lib/docker/volumes

Volume mount container perspective:
----------------------------------
>	If you use bind mount and the host directory exists, the container's
	target directory will be overridden by the host directory's contents.
	
	If the container's target directory doesn't exist, the process fails.


Using ENTRYPOINT script in Docker container to create a host directory
----------------------------------------------------------------------
>	Container Isolation
	The ENTRYPOINT script runs inside the container's filesystem, not the host.
	Containers are isolated from the host filesystem except for explicitly
	mounted volumes or bind mounts (where host directory exist).
	
>	When you define a bind mount, Docker attempts to mount that host path
	before the container starts and the ENTRYPOINT executes.
	If host directory doesn't exist Docker fails.
	
>	Mount Happens pre-startup:
	Volume mounting is part of the container initialization process handled
	by Docker Daemon on the host.

Bind mount vs Named volume:
--------------------------
>	In Bind mount host directory will override container directory.
	So whatever files you expected container directory to be populated with
	during build, will be overriden by host directory content's during run-time.

>	But will Name volume, the first time the container runs, Docker populates
	the named volume with the images's contents.
	Subsequent runs use this persistent volume.


Can you mkdir on host from Dockerfile (Container context)?
>	No.
	Because of Build Process isolation.
	
>	Dockerfile defines instructions to build a Docker image,
	not to interact with the host filesystem directly.

>	Dockerfile builds an image, which is static template.
	It is not a running container with host access.



Do I use bind or volumes (named volumes)?

	I am using Named Volume with Custom path.
	
	bind will replace the container directory with contents of host directory.
	So if host directory is empty, it will override the container directory.
	
	Named Volumes, if host directory is empty it will be replaced with 
	container directory contents.
	But if host directory is not empty, host directory contents will replace container
	directory contents.
	
	- Named Volumes are the preferred mechanism for persisting data generated by 
	  and used by Docker containers. 
	- Named Volumes are not a good choice if you need to access the files from the host, 
	  as the volume is completely managed by Docker. 
	  (But I don't need to access it, do I?)
	  
	- Named Volumes place the contents in host in /var/lib/docker/volumes/
	
	- You can also use Named Volumes with Custom Host Paths, which is what I am using.
	
	- use :wo to write only to host directory ?
	
Remove volume files from Host, in make clean.
	
	- to avoid Host volume mount directory content from over riding container mount directory.
	- remember we want the Host volume mount directory to be empty, so container can copy
	  its content to the host
	- If I didn't rm files at the end of evaluation, the files remaining will override
	  when I build and run docker containers in subsequent evaluatoins.
	  
docker volume rm vs docker volume prune vs rm -rf files
----------------    -------------------    ------------

docker volume rm
	- Remove one or more volumes. 
	- You can't remove a volume that's in use by a container.

docker volume prune -f
	- Remove all unused local volumes. 
	- Unused local volumes are those which are not referenced by any containers. 
	- By default, it only removes anonymous volumes.

1) I manually delete the data files on the host
   	- rm -rf /home/.../wp_files/*
   	- rm -rf /home/.../mysql_data/*
  
2) then, docker volume prune -f to remove any dangling volume
3) also, docker volume rm srcs_wp_files etc
	- to remove volume defintions

  
